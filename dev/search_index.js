var documenterSearchIndex = {"docs":
[{"location":"functions/#FBCModelTests.jl-functions","page":"Reference","title":"FBCModelTests.jl functions","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests]\nPages = [\"FBCModelTests.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.FBCModelTests","page":"Reference","title":"FBCModelTests.FBCModelTests","text":"module FBCModelTests\n\nA collection of tests for constraint-based flux metabolic models.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FROG","page":"Reference","title":"FROG","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests, FBCModelTests.FROG]\nPages = [\"frog.jl\", \"frog/structs.jl\", \"frog/frontend.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.FROG","page":"Reference","title":"FBCModelTests.FROG","text":"module FROG\n\nA collection of reproducibility checks for constraint-based metabolic models together with a report generator and tester.\n\nSee https://www.ebi.ac.uk/biomodels/curation/fbc for details.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.FROG.ObjectiveValue","page":"Reference","title":"FBCModelTests.FROG.ObjectiveValue","text":"\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.FROG.FROGMetadata","page":"Reference","title":"FBCModelTests.FROG.FROGMetadata","text":"mutable struct Dict{String, Any} <: AbstractDict{String, Any}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.FROG.FROGObjectiveReport","page":"Reference","title":"FBCModelTests.FROG.FROGObjectiveReport","text":"struct FROGObjectiveReport\n\nFields\n\noptimum::Union{Nothing, Float64}\nreactions::Dict{String, FBCModelTests.FROG.FROGReactionReport}\ngene_deletions::Dict{String, Union{Nothing, Float64}}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.FROG.FROGReactionReport","page":"Reference","title":"FBCModelTests.FROG.FROGReactionReport","text":"struct FROGReactionReport\n\nFields\n\nobjective_flux::Union{Nothing, Float64}\nfraction_optimum::Float64\nvariability_min::Union{Nothing, Float64}\nvariability_max::Union{Nothing, Float64}\ndeletion::Union{Nothing, Float64}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.FROG.FROGReportData","page":"Reference","title":"FBCModelTests.FROG.FROGReportData","text":"mutable struct Dict{String, FBCModelTests.FROG.FROGObjectiveReport} <: AbstractDict{String, FBCModelTests.FROG.FROGObjectiveReport}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.FROG.compare_reports-Tuple{String, String}","page":"Reference","title":"FBCModelTests.FROG.compare_reports","text":"compare_reports(\n    report_dir_a::String,\n    report_dir_b::String;\n    kwargs...\n) -> Union{Test.FallbackTestSet, Test.DefaultTestSet}\n\n\nA simple wrapper for comparing 2 previously generated reports in their respective directories. Additional arguments are fowarded to ReportTests.test_report_compatibility.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.FROG.compare_reports_toplevel-Tuple{String, String}","page":"Reference","title":"FBCModelTests.FROG.compare_reports_toplevel","text":"compare_reports_toplevel(\n    report_dir_a::String,\n    report_dir_b::String;\n    kwargs...\n) -> Test.DefaultTestSet\n\n\nLike compare_reports, but with a specific testset settings that provide better user-facing reports.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.FROG.generate_report-Tuple{String}","page":"Reference","title":"FBCModelTests.FROG.generate_report","text":"generate_report(\n    filename::String;\n    report_dir,\n    optimizer,\n    modifications,\n    workers,\n    basefilename\n)\n\n\nA complete function for one-shot generation of FROG reports. Use ReportGenerators.generate_report_data, ReportGenerators.generate_metadata and ReportIO.save_report for finer control of the process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Reading-and-writing-reports","page":"Reference","title":"Reading and writing reports","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.FROG.ReportIO]\nPages = [\"frog/io.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.FROG.ReportIO","page":"Reference","title":"FBCModelTests.FROG.ReportIO","text":"module ReportIO\n\nFunctions for reading and writing FROG reports.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.FROG.ReportIO.load_report-Tuple{String}","page":"Reference","title":"FBCModelTests.FROG.ReportIO.load_report","text":"load_report(\n    report_dir::String\n) -> NamedTuple{(:metadata, :report), Tuple{Dict{String, Any}, Dict{String, FBCModelTests.FROG.FROGObjectiveReport}}}\n\n\nReverse of save_report.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.FROG.ReportIO.save_report-Tuple{Dict{String, FBCModelTests.FROG.FROGObjectiveReport}, Dict{String, Any}}","page":"Reference","title":"FBCModelTests.FROG.ReportIO.save_report","text":"save_report(\n    r::Dict{String, FBCModelTests.FROG.FROGObjectiveReport},\n    metadata::Dict{String, Any};\n    report_dir,\n    basefilename\n)\n\n\nWrite the contents of FROGReportData to the 4 TSV files as specified by FROG standard, and additionally write the metadata into the JSON file.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Generating-and-testing-the-reports","page":"Reference","title":"Generating and testing the reports","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.FROG.ReportGenerators, FBCModelTests.FROG.ReportTests]\nPages = [\"frog/report.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.FROG.ReportGenerators","page":"Reference","title":"FBCModelTests.FROG.ReportGenerators","text":"module ReportGenerators\n\nFunctions for generating FROG report data and metadata file contents.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.FROG.ReportGenerators.ResetObjective","page":"Reference","title":"FBCModelTests.FROG.ReportGenerators.ResetObjective","text":"struct ResetObjective <: COBREXA.ModelWrapper\n\nFields\n\nmodel::COBREXA.MetabolicModel\nobjective::SparseArrays.SparseVector{Float64, Int64}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.FROG.ReportGenerators.frog_objective_report","page":"Reference","title":"FBCModelTests.FROG.ReportGenerators.frog_objective_report","text":"frog_objective_report(sbml_model::COBREXA.SBMLModel)\nfrog_objective_report(\n    sbml_model::COBREXA.SBMLModel,\n    objective::Union{Nothing, String};\n    optimizer,\n    modifications,\n    workers,\n    fraction_optimum\n)\n\n\nGenerate a FROGObjectiveReport containing the reproducibility data for a single objective in the SBML model.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FBCModelTests.FROG.ReportGenerators.generate_metadata-Tuple{String}","page":"Reference","title":"FBCModelTests.FROG.ReportGenerators.generate_metadata","text":"generate_metadata(filename::String; optimizer, basefilename)\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.FROG.ReportGenerators.generate_report_data-Tuple{COBREXA.SBMLModel}","page":"Reference","title":"FBCModelTests.FROG.ReportGenerators.generate_report_data","text":"generate_report_data(\n    model::COBREXA.SBMLModel;\n    kwargs...\n) -> Dict{Any, Any}\n\n\nGenerate FROGReportData for a model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.FROG.ReportTests","page":"Reference","title":"FBCModelTests.FROG.ReportTests","text":"module ReportTests\n\nFunction for testing the compatibility of FROG report data.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.FROG.ReportTests.test_metadata_compatibility-Tuple{Dict{String, Any}, Dict{String, Any}}","page":"Reference","title":"FBCModelTests.FROG.ReportTests.test_metadata_compatibility","text":"test_metadata_compatibility(\n    a::Dict{String, Any},\n    b::Dict{String, Any}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.FROG.ReportTests.test_report_compatibility-Tuple{Dict{String, FBCModelTests.FROG.FROGObjectiveReport}, Dict{String, FBCModelTests.FROG.FROGObjectiveReport}}","page":"Reference","title":"FBCModelTests.FROG.ReportTests.test_report_compatibility","text":"test_report_compatibility(\n    a::Dict{String, FBCModelTests.FROG.FROGObjectiveReport},\n    b::Dict{String, FBCModelTests.FROG.FROGObjectiveReport};\n    absolute_tolerance,\n    relative_tolerance\n)\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#MEMOTE","page":"Reference","title":"MEMOTE","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote]\nPages = [\"memote.jl\", \"memote/frontend.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote","page":"Reference","title":"FBCModelTests.Memote","text":"module Memote\n\nThis package contains a collection of tests based on Memote. See Lieven, C., Beber, M.E., Olivier, B.G. et al. MEMOTE for standardized genome-scale metabolic model testing. Nat Biotechnol 38, 272–276 (2020). https://doi.org/10.1038/s41587-020-0446-y for details.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.run_tests-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.run_tests","text":"run_tests(\n    model::COBREXA.MetabolicModel,\n    optimizer;\n    config,\n    filename,\n    workers\n) -> Union{Test.FallbackTestSet, Test.DefaultTestSet}\n\n\nRun a MEMOTE-like test suite on model using optimizer to solve optimization problems; some basic parameters and thresholds are taken from config.\n\nSome of the tests internally convert the input model to StandardModel of COBREXA; supplying a StandardModel may thus increase efficiency of the whole process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.run_tests-Tuple{String, Any}","page":"Reference","title":"FBCModelTests.Memote.run_tests","text":"run_tests(\n    filename::String,\n    optimizer;\n    kwargs...\n) -> Union{Test.FallbackTestSet, Test.DefaultTestSet}\n\n\nOverload of run_tests that works directly with a file.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MEMOTE-utilities","page":"Reference","title":"MEMOTE utilities","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Utils, FBCModelTests.Memote.Config]\nPages = [\"memote/utils.jl\", \"memote/config.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Utils","page":"Reference","title":"FBCModelTests.Memote.Utils","text":"module  Utils\n\nMiscellaneous functions used by memote style tests, not typically user facing.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Utils._compare_flux_bounds-NTuple{4, Any}","page":"Reference","title":"FBCModelTests.Memote.Utils._compare_flux_bounds","text":"_compare_flux_bounds(\n    fluxes,\n    bound,\n    tol,\n    comparison_operator\n) -> Dict{String, Tuple{String, Float64}}\n\n\nInternal helper function to compare fluxes with specific bounds.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Utils.get_molar_mass-Tuple{Any, Any}","page":"Reference","title":"FBCModelTests.Memote.Utils.get_molar_mass","text":"get_molar_mass(model, mid) -> Any\n\n\nReturn molar mass of mid. Return NaN if formula does not exist.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Utils.median_bounds-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Utils.median_bounds","text":"median_bounds(\n    model::COBREXA.MetabolicModel\n) -> Tuple{Any, Any}\n\n\nA helper function that returns the median upper and lower bounds in a tuple. If none can be calculated, constants from COBREXA are used as the default values.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Utils.parse_annotations-Tuple{Any}","page":"Reference","title":"FBCModelTests.Memote.Utils.parse_annotations","text":"parse_annotations(annos) -> Dict{String, Vector{String}}\n\n\nEnsure annotations are in a standardized format. Some models represent annotations like:\n\nDict{String, Vector{String}} with 2 entries:\n  \"sbo\"          => [\"SBO:0000176\"]\n  \"RESOURCE_URI\" => [\"https://identifiers.org/ec-code/4.1.99.12\", \"https://identifiers.org/bigg.reaction/DB4PS\", ...]\n\nbut the key used to map to URI annotations is not standarized. This helper function constructs a new annotation dictionary to ensure that all annotations looks like:\n\nDict{String, Vector{String}} with 7 entries:\n  \"bigg.reaction\"     => [\"DB4PS\"]\n  \"pubmed\"            => [\"12595523\"]\n  \"sbo\"               => [\"SBO:0000176\"]\n  \"kegg.pathway\"      => [\"sce00740\", \"sce01110\"]\n  \"metanetx.reaction\" => [\"MNXR97178\"]\n  \"kegg.reaction\"     => [\"R07281\"]\n  \"ec-code\"           => [\"4.1.99.12\"]\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Utils.to_element-Tuple{String}","page":"Reference","title":"FBCModelTests.Memote.Utils.to_element","text":"to_element(x::String) -> PeriodicTable.Element\n\n\nReturn the chemical element of x.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Config","page":"Reference","title":"FBCModelTests.Memote.Config","text":"module Config\n\nModule housing the configuration parameters for the memote-style tests.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Config.AnnotationConfig","page":"Reference","title":"FBCModelTests.Memote.Config.AnnotationConfig","text":"mutable struct AnnotationConfig\n\nFields\n\ngene_annotation_keywords::Vector{String}\ngene_annotation_regexes::Dict{String, Regex}\nmetabolite_annotation_keywords::Vector{String}\nmetabolite_annotation_regexes::Dict{String, Regex}\nreaction_annotation_keywords::Vector{String}\nreaction_annotation_regexes::Dict{String, Regex}\nmaximum_nonconformal_references::Int64\nmaximum_missing_databases::Int64\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.BasicConfig","page":"Reference","title":"FBCModelTests.Memote.Config.BasicConfig","text":"mutable struct BasicConfig\n\nFields\n\nminimum_metabolic_coverage::Float64\nminimum_growth_rate::Float64\nmaximum_growth_rate::Float64\noptimizer_modifications::Vector{Function}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.BiomassConfig","page":"Reference","title":"FBCModelTests.Memote.Config.BiomassConfig","text":"mutable struct BiomassConfig\n\nFields\n\nessential_precursors::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.ConsistencyConfig","page":"Reference","title":"FBCModelTests.Memote.Config.ConsistencyConfig","text":"mutable struct ConsistencyConfig\n\nFields\n\nconsistency_ignored_reactions::Vector{String}\ntolerance_threshold::Float64\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.EnergyConfig","page":"Reference","title":"FBCModelTests.Memote.Config.EnergyConfig","text":"mutable struct EnergyConfig\n\nFields\n\nenergy_dissipating_metabolites::Vector{String}\nadditional_energy_generating_reactions::Vector{COBREXA.Reaction}\nignored_energy_reactions::Vector{String}\noptimizer_modifications::Vector{Function}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.MemoteConfig","page":"Reference","title":"FBCModelTests.Memote.Config.MemoteConfig","text":"mutable struct MemoteConfig\n\nA grouping of parameters used by the metabolic testing infrastructure.\n\nFields\n\nannotation::FBCModelTests.Memote.Config.AnnotationConfig\nbasic::FBCModelTests.Memote.Config.BasicConfig\nbiomass::FBCModelTests.Memote.Config.BiomassConfig\nconsistency::FBCModelTests.Memote.Config.ConsistencyConfig\nenergy::FBCModelTests.Memote.Config.EnergyConfig\nmetabolite::FBCModelTests.Memote.Config.MetaboliteConfig\nnetwork::FBCModelTests.Memote.Config.NetworkConfig\nreaction::FBCModelTests.Memote.Config.ReactionConfig\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.MetaboliteConfig","page":"Reference","title":"FBCModelTests.Memote.Config.MetaboliteConfig","text":"mutable struct MetaboliteConfig\n\nFields\n\ntest_annotation::String\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.NetworkConfig","page":"Reference","title":"FBCModelTests.Memote.Config.NetworkConfig","text":"mutable struct NetworkConfig\n\nFields\n\ncondition_number::Float64\ncycle_tol::Float64\nblocked_tol::Float64\noptimizer_modifications::Vector{Function}\n\n\n\n\n\n","category":"type"},{"location":"functions/#FBCModelTests.Memote.Config.ReactionConfig","page":"Reference","title":"FBCModelTests.Memote.Config.ReactionConfig","text":"mutable struct ReactionConfig\n\nFields\n\nmass_ignored_reactions::Vector{String}\ncharge_ignored_reactions::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"functions/#MEMOTE-checks","page":"Reference","title":"MEMOTE checks","text":"","category":"section"},{"location":"functions/#Basic-checks","page":"Reference","title":"Basic checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Basic]\nPages = [\"src/memote/checks/Basic.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Basic","page":"Reference","title":"FBCModelTests.Memote.Basic","text":"module Basic\n\nBasic metabolic model tests.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Basic.model_compartments-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_compartments","text":"model_compartments(model::COBREXA.MetabolicModel) -> Set\n\n\nReturn the number of unique compartments in the model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Basic.model_has_compartments-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_has_compartments","text":"model_has_compartments(\n    model::COBREXA.MetabolicModel\n) -> Bool\n\n\nTest if the model has one or more compartments.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Basic.model_has_genes-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_has_genes","text":"model_has_genes(model::COBREXA.MetabolicModel) -> Any\n\n\nTest if the model has any genes.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Basic.model_has_metabolites-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_has_metabolites","text":"model_has_metabolites(model::COBREXA.MetabolicModel) -> Any\n\n\nTest if the model has any metabolites.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Basic.model_has_reactions-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_has_reactions","text":"model_has_reactions(model::COBREXA.MetabolicModel) -> Any\n\n\nTest if the model has any reactions.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Basic.model_metabolic_coverage-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_metabolic_coverage","text":"model_metabolic_coverage(\n    model::COBREXA.MetabolicModel\n) -> Any\n\n\nCalculate the metabolic coverage by dividing the number of reactions by the number of genes.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Basic.model_solves_in_default_medium-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.Basic.model_solves_in_default_medium","text":"model_solves_in_default_medium(\n    model::COBREXA.MetabolicModel,\n    optimizer;\n    config\n) -> Any\n\n\nCheck if the model can be solved under default conditions and yield a reasonable growth rate. Here reasonable is set via config.basic.minimum_growth_rate and config.basic.maximum_growth_rate. Optionally, pass optimization modifications to the solver through config.basic.optimizer_modifications.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Consistency-checks","page":"Reference","title":"Consistency checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Consistency]\nPages = [\"src/memote/checks/Consistency.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Consistency","page":"Reference","title":"FBCModelTests.Memote.Consistency","text":"module Consistency\n\nThis module checks if the metabolic model is overall consistent.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Consistency.model_is_consistent-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.Consistency.model_is_consistent","text":"model_is_consistent(\n    model::COBREXA.MetabolicModel,\n    optimizer;\n    config\n) -> Bool\n\n\nDetermines if the model is stoichiometrically consistent. Note, stoichiometric consistency does not guarantee that mass balances must hold in the model. A more robust check is to ensure that each reaction is mass balanced, but this only works if all metabolites have masses assigned to them. Test based on Gevorgyan, Albert, Mark G. Poolman, and David A. Fell. \"Detection of stoichiometric inconsistencies in biomolecular models.\" Bioinformatics (2008). Optionally ignore some reactions in this analysis by adding reaction IDs to config.consistency.consistency_ignored_reactions.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Metabolite-checks","page":"Reference","title":"Metabolite checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Metabolites]\nPages = [\"src/memote/checks/Metabolites.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Metabolites","page":"Reference","title":"FBCModelTests.Memote.Metabolites","text":"module Metabolites\n\nA module testing various metabolite properties.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Metabolites._find_orphan_or_deadend_metabolites-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Metabolites._find_orphan_or_deadend_metabolites","text":"_find_orphan_or_deadend_metabolites(\n    model::COBREXA.MetabolicModel;\n    consumed\n) -> Vector{String}\n\n\nHelper function to find orphan or deadend metabolites. Specify consumed=true to consider orphan metabolites or false to consider deadend metabolites. Set complete_medium=true to open all boundary reactions to simulate a complete medium.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Metabolites.find_deadend_metabolites-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Metabolites.find_deadend_metabolites","text":"find_deadend_metabolites(\n    model::COBREXA.MetabolicModel\n) -> Vector{String}\n\n\nFind all metabolites that can only (excludes reversible reactions) be produced in the model by inspecting the stoichiometric matrix.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Metabolites.find_disconnected_metabolites-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Metabolites.find_disconnected_metabolites","text":"find_disconnected_metabolites(\n    model::COBREXA.MetabolicModel\n) -> Any\n\n\nReturns a list of all metabolites that aren't part of any reactions.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Metabolites.find_orphan_metabolites-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Metabolites.find_orphan_metabolites","text":"find_orphan_metabolites(\n    model::COBREXA.MetabolicModel\n) -> Vector{String}\n\n\nFind all metabolites that can only (excludes reversible reactions) be consumed in the model by inspecting the stoichiometric matrix.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Metabolites.metabolites_are_duplicated-Tuple{COBREXA.MetabolicModel, Any, Any}","page":"Reference","title":"FBCModelTests.Memote.Metabolites.metabolites_are_duplicated","text":"metabolites_are_duplicated(\n    model::COBREXA.MetabolicModel,\n    m1,\n    m2;\n    config\n) -> Bool\n\n\nTest if metabolites m1 and m2 are different by comparing their config.metabolite.test_annotation field in the annotations of each metabolite. Note, if no annotations are present for one or both of the metabolites, then return true.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Metabolites.metabolites_duplicated_in_compartment-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Metabolites.metabolites_duplicated_in_compartment","text":"metabolites_duplicated_in_compartment(\n    model::COBREXA.MetabolicModel;\n    config\n) -> Set{String}\n\n\nReturn a dictionary of metabolites that are duplicated in their compartment.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Reaction-checks","page":"Reference","title":"Reaction checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Reactions]\nPages = [\"src/memote/checks/Reactions.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Reactions","page":"Reference","title":"FBCModelTests.Memote.Reactions","text":"module Reactions\n\nA module testing reaction properties.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Reactions.findall_duplicated_reactions-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Reactions.findall_duplicated_reactions","text":"findall_duplicated_reactions(\n    model::COBREXA.MetabolicModel\n) -> Set{String}\n\n\nReturn a list of all reactions that are duplicated.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Reactions.model_has_atpm_reaction-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Reactions.model_has_atpm_reaction","text":"model_has_atpm_reaction(\n    model::COBREXA.MetabolicModel\n) -> Union{Missing, Bool}\n\n\nCheck if model has an ATP maintenance reaction built in (also called a non-growth associated maintenance cost). Looks for reaction annotations corresponding to the sbo maintenance term.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Reactions.reaction_is_charge_balanced-Tuple{COBREXA.MetabolicModel, String}","page":"Reference","title":"FBCModelTests.Memote.Reactions.reaction_is_charge_balanced","text":"reaction_is_charge_balanced(\n    model::COBREXA.MetabolicModel,\n    rid::String\n) -> Any\n\n\nCheck if the charges across a reaction balance.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Reactions.reaction_is_mass_balanced-Tuple{COBREXA.MetabolicModel, String}","page":"Reference","title":"FBCModelTests.Memote.Reactions.reaction_is_mass_balanced","text":"reaction_is_mass_balanced(\n    model::COBREXA.MetabolicModel,\n    rid::String\n) -> Bool\n\n\nCheck if the mass across a reaction balances.\n\n\n\n\n\n","category":"method"},{"location":"functions/#GPRAssociation-checks","page":"Reference","title":"GPRAssociation checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.GPRAssociation]\nPages = [\"src/memote/checks/GPRAssociation.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.GPRAssociation","page":"Reference","title":"FBCModelTests.Memote.GPRAssociation","text":"module GPRAssociation\n\nA module testing various facets of the gene reaction associations.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.GPRAssociation.reaction_has_sensible_gpr-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.GPRAssociation.reaction_has_sensible_gpr","text":"reaction_has_sensible_gpr(\n    model::COBREXA.MetabolicModel,\n    rid\n) -> Any\n\n\nCheck if a reaction has a gene reaction rule, and that each gene in the rule is contained in the model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.GPRAssociation.reactions_with_complexes-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.GPRAssociation.reactions_with_complexes","text":"reactions_with_complexes(\n    model::COBREXA.MetabolicModel\n) -> Any\n\n\nReturn a list of reaction ids that have protein complexes assigned to them.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Biomass-checks","page":"Reference","title":"Biomass checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Biomass]\nPages = [\"src/memote/checks/Biomass.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Biomass","page":"Reference","title":"FBCModelTests.Memote.Biomass","text":"module Biomass\n\nThis module contains tests that check the consistency of the biomass reaction.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Biomass.atp_present_in_biomass_reaction-Tuple{COBREXA.MetabolicModel, String}","page":"Reference","title":"FBCModelTests.Memote.Biomass.atp_present_in_biomass_reaction","text":"atp_present_in_biomass_reaction(\n    model::COBREXA.MetabolicModel,\n    rid::String\n) -> Bool\n\n\nCheck if the biomass reaction consumes ATP and H₂O, and produces ADP, HO₄P, and H⁺. Annotations are parsed, and the BiGG namespace is used to identify these metabolites in the underlying model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Biomass.biomass_missing_essential_precursors-Tuple{COBREXA.MetabolicModel, String}","page":"Reference","title":"FBCModelTests.Memote.Biomass.biomass_missing_essential_precursors","text":"biomass_missing_essential_precursors(\n    model::COBREXA.MetabolicModel,\n    rid::String;\n    config\n) -> Bool\n\n\nTests if the biomass reaction contains a set of essential precursors, listed in config.biomass.essential_precursors. Uses the BiGG namespace as a reference and the metabolite annotations.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Biomass.biomass_reaction_is_consistent-Tuple{COBREXA.MetabolicModel, String}","page":"Reference","title":"FBCModelTests.Memote.Biomass.biomass_reaction_is_consistent","text":"biomass_reaction_is_consistent(\n    model::COBREXA.MetabolicModel,\n    rid::String\n) -> Any\n\n\nCheck that the molar mass of a biomass reactions falls within [1 - 1e-3, 1 + 1e-6] by calling biomass_reaction_molar_mass internally.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Biomass.biomass_reaction_molar_mass-Tuple{COBREXA.MetabolicModel, String}","page":"Reference","title":"FBCModelTests.Memote.Biomass.biomass_reaction_molar_mass","text":"biomass_reaction_molar_mass(\n    model::COBREXA.MetabolicModel,\n    rid::String\n) -> Any\n\n\nFor a biomass reaction rid, calculate the molar weight of the reaction by summing the products of the associated metabolite coefficients with their molar masses (g/mol).\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Biomass.findall_biomass_reactions-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Biomass.findall_biomass_reactions","text":"findall_biomass_reactions(\n    model::COBREXA.MetabolicModel\n) -> Any\n\n\nIdentify all the biomass reactions in the model using only sbo annotations.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Network-checks","page":"Reference","title":"Network checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Network]\nPages = [\"src/memote/checks/Network.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Network","page":"Reference","title":"FBCModelTests.Memote.Network","text":"module Network\n\nA module testing the network and topology properties of the model.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Network.find_all_universally_blocked_reactions-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.Network.find_all_universally_blocked_reactions","text":"find_all_universally_blocked_reactions(\n    model::COBREXA.MetabolicModel,\n    optimizer;\n    config,\n    workers\n) -> Vector{String}\n\n\nMake all boundary reactions reversible and run FVA on the model to find all reactions that are universally blocked. Optimizer modifications can be passed through config.network.optimizer_modifications\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Network.find_cycle_reactions-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.Network.find_cycle_reactions","text":"find_cycle_reactions(\n    model::COBREXA.MetabolicModel,\n    optimizer;\n    config,\n    workers\n) -> Vector\n\n\nFind all reactions that participate in stoichiometrically balanced cycles by closing all boundary reactions and running fva on the resultant model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Network.stoichiometric_max_min_ratio-Tuple{COBREXA.MetabolicModel}","page":"Reference","title":"FBCModelTests.Memote.Network.stoichiometric_max_min_ratio","text":"stoichiometric_max_min_ratio(\n    model::COBREXA.MetabolicModel\n) -> Any\n\n\nReturn the ratio of the absolute maximum and minimum value of the nonzero coefficients in the stoichiometric matrix of model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Annotation-checks","page":"Reference","title":"Annotation checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Annotation]\nPages = [\"src/memote/checks/Annotation.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Annotation","page":"Reference","title":"FBCModelTests.Memote.Annotation","text":"module Annotation\n\nThis module contains tests used to check the coverage and conformance of reaction, gene, and metabolite annotations.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Annotation._find_nonconformal_annotations-Tuple{COBREXA.MetabolicModel, String, Any, Any}","page":"Reference","title":"FBCModelTests.Memote.Annotation._find_nonconformal_annotations","text":"_find_nonconformal_annotations(\n    model::COBREXA.MetabolicModel,\n    id_accessor::String,\n    annotation_accessor,\n    annotation_regex\n) -> Vector{String}\n\n\nHelper function to find all the annotations for a component that do not conform in the model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation._find_unannotated_components-Tuple{COBREXA.MetabolicModel, String, Any, Any}","page":"Reference","title":"FBCModelTests.Memote.Annotation._find_unannotated_components","text":"_find_unannotated_components(\n    model::COBREXA.MetabolicModel,\n    id_accessor::String,\n    annotation_accessor,\n    annotation_kws\n) -> Vector{String}\n\n\nHelper function to find all the annotations that are missing for a component in a model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation.findall_nonconformal_gene_annotations-Tuple{Any, String}","page":"Reference","title":"FBCModelTests.Memote.Annotation.findall_nonconformal_gene_annotations","text":"findall_nonconformal_gene_annotations(\n    model,\n    gid::String;\n    config\n) -> Vector{String}\n\n\nCheck if the gene annotation entry conforms to commonly recognized formats of annotation database using regex patterns. Uses the database formats listed in config.annotation.gene_annotation_regexes to test the conformity. Returns a string vector of database ids do not conform.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation.findall_nonconformal_metabolite_annotations-Tuple{Any, String}","page":"Reference","title":"FBCModelTests.Memote.Annotation.findall_nonconformal_metabolite_annotations","text":"findall_nonconformal_metabolite_annotations(\n    model,\n    mid::String;\n    config\n) -> Vector{String}\n\n\nCheck if the metabolite annotation entry conforms to commonly recognized formats of annotation database using regex patterns. Uses the database formats listed in config.annotation.metabolite_annotation_regexes to test the conformity. Returns a string vector of database ids do not conform.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation.findall_nonconformal_reaction_annotations-Tuple{Any, String}","page":"Reference","title":"FBCModelTests.Memote.Annotation.findall_nonconformal_reaction_annotations","text":"findall_nonconformal_reaction_annotations(\n    model,\n    rid::String;\n    config\n) -> Vector{String}\n\n\nCheck if the reaction annotation entry conforms to commonly recognized formats of annotation database using regex patterns. Uses the database formats listed in config.annotation.reaction_annotation_regexes to test the conformity. Returns a string vector of database ids do not conform.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation.findall_unannotated_gene_databases-Tuple{Any, String}","page":"Reference","title":"FBCModelTests.Memote.Annotation.findall_unannotated_gene_databases","text":"findall_unannotated_gene_databases(\n    model,\n    gid::String;\n    config\n) -> Vector{String}\n\n\nChecks if the databases listed in config.annotation.gene_annotation_keywords are present in the gene annotations. Returns a vector of annotation keywords that were not found.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation.findall_unannotated_metabolite_databases-Tuple{Any, String}","page":"Reference","title":"FBCModelTests.Memote.Annotation.findall_unannotated_metabolite_databases","text":"findall_unannotated_metabolite_databases(\n    model,\n    mid::String;\n    config\n) -> Vector{String}\n\n\nChecks if the databases listed in config.annotation.metabolite_annotation_keywords are present in the metabolite annotations. Returns a vector of annotation keywords that were not found.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FBCModelTests.Memote.Annotation.findall_unannotated_reaction_databases-Tuple{Any, String}","page":"Reference","title":"FBCModelTests.Memote.Annotation.findall_unannotated_reaction_databases","text":"findall_unannotated_reaction_databases(\n    model,\n    rid::String;\n    config\n) -> Vector{String}\n\n\nChecks if the databases listed in config.annotation.reaction_annotation_keywords are present in the reaction annotations. Returns a vector of annotation keywords that were not found.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Energy-checks","page":"Reference","title":"Energy checks","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests.Memote.Energy]\nPages = [\"src/memote/checks/Energy.jl\"]","category":"page"},{"location":"functions/#FBCModelTests.Memote.Energy","page":"Reference","title":"FBCModelTests.Memote.Energy","text":"module Energy\n\nThis module checks if the model is energetically sensible.\n\n\n\n\n\n","category":"module"},{"location":"functions/#FBCModelTests.Memote.Energy.model_has_no_erroneous_energy_generating_cycles-Tuple{COBREXA.MetabolicModel, Any}","page":"Reference","title":"FBCModelTests.Memote.Energy.model_has_no_erroneous_energy_generating_cycles","text":"model_has_no_erroneous_energy_generating_cycles(\n    model::COBREXA.MetabolicModel,\n    optimizer;\n    config\n) -> Bool\n\n\nNOTE: this test is currently skipped and will appear as broken in the output.\n\nAttempts to detect if the model contains any erroneous energy generating cycles by closing all exchange reactions and using flux balance analysis to maximize the sum of fluxes through a set of energy dissipating reactions. The flux sum should be zero if the model is free of energy generating reactions. This function is based on Fritzemeier, Claus Jonathan, et al. \"Erroneous energy-generating cycles in published genome scale metabolic networks: Identification and removal.\" PLoS computational biology (2017). The energy dissipating reactions are based on the source paper, and include:\n\nATP + H2O --> ADP + H + Phosphate\nCTP + H2O --> CDP + H + Phosphate\nGTP + H2O --> GDP + H + Phosphate\nUTP + H2O --> UDP + H + Phosphate\nITP + H2O --> IDP + H + Phosphate\nNADH --> H + NAD\nNADPH --> H + NADP\nFADH2 --> 2 H + FAD\nFMNH2 --> 2 H + FMN\nUbiquinol-8 --> 2 H + Ubiquinone-8\nMenaquinol-8 --> 2 H + Menaquinone-8\n2-Demethylmenaquinol-8 --> 2 H + 2-Demethylmenaquinone-8\nH2O + ACCOA --> H + Acetate + COA\nL-Glutamate + H2O --> 2-Oxoglutarate + Ammonium + 2 H\nH[external] --> H\n\nAdditional energy dissipating reactions can be directly specified through config.energy.additional_energy_generating_reactions, which should be vector of COBREXA Reactions using the same metabolite name space as the model.If your model uses a different name space, then you have to change the values (NOT the keys) of config.energy.energy_dissipating_metabolites. Each energy dissipating reaction is added to the test only if all its associated metabolites are present. Any config.energy.optimizer_modifications to the solver are passed directly through to COBREXA's flux_balance_analysis function. All config.energy.boundary_reactions and config.energy.ignored_energy_reactions are deleted from an internal copy of model; this internal copy is used for analysis. Returns true if the model has no energy generating cycles.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Types-and-utilities","page":"Reference","title":"Types and utilities","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [FBCModelTests]\nPages = [\"common.jl\"]","category":"page"},{"location":"#FBCModelTests.jl-—-testing-and-reproducibility-of-constraint-based-metabolic-modeling","page":"Home","title":"FBCModelTests.jl — testing and reproducibility of constraint-based metabolic modeling","text":"","category":"section"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"functions.md\"]\nDepth = 2","category":"page"}]
}
